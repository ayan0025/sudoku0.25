#include <stdio.h>
#include <stdbool.h>

#define SIZE 9

// Function to print the Sudoku board
void printBoard(int board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

// Function to check if it's safe to place a number in a cell
bool isSafe(int board[SIZE][SIZE], int row, int col, int num) {
    // Check if the number is not in the current row and column
    for (int i = 0; i < SIZE; i++) {
        if (board[row][i] == num || board[i][col] == num) {
            return false;
        }
    }

    // Check if the number is not in the current 3x3 subgrid
    int subgridStartRow = row - row % 3;
    int subgridStartCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + subgridStartRow][j + subgridStartCol] == num) {
                return false;
            }
        }
    }

    return true;
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int board[SIZE][SIZE]) {
    int row, col;
    bool isEmpty = false;

    // Find an empty cell (cell with value 0)
    for (row = 0; row < SIZE; row++) {
        for (col = 0; col < SIZE; col++) {
            if (board[row][col] == 0) {
                isEmpty = true;
                break;
            }
        }
        if (isEmpty) {
            break;
        }
    }

    // If no empty cell is found, the Sudoku is solved
    if (!isEmpty) {
        return true;
    }

    // Try placing numbers from 1 to 9 in the current cell
    for (int num = 1; num <= 9; num++) {
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;

            // Recursively solve the rest of the Sudoku
            if (solveSudoku(board)) {
                return true;
            }

            // If the current placement leads to an incorrect solution,
            // backtrack and try the next number
            board[row][col] = 0;
        }
    }

    // If no number can be placed, backtrack to the previous cell
    return false;
}

int main() {
    int board[SIZE][SIZE];

    printf("Enter the Sudoku puzzle (Use 0 for empty cells):\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf("%d", &board[i][j]);
        }
    }

    if (solveSudoku(board)) {
        printf("\nSolved Sudoku:\n");
        printBoard(board);
    } else {
        printf("\nNo solution exists for the given Sudoku puzzle.\n");
    }

    return 0;
}
